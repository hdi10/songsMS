{
	"info": {
		"_postman_id": "19361c89-a35b-4f22-82a9-e25c3403dd48",
		"name": "SongsMS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14968172",
		"_collection_link": "https://cloudy-spaceship-666245.postman.co/workspace/New-Team-Workspace~0288f5bc-e9d5-48b4-8ded-3e6d20ea4271/collection/14968172-19361c89-a35b-4f22-82a9-e25c3403dd48?action=share&source=collection_link&creator=14968172"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "PostAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const token = pm.response.text();\r",
									"\r",
									"console.log(\"Received token:\", token);\r",
									"\r",
									"// Token direkt aus der Antwort als Text speichern\r",
									"pm.environment.set(\"authToken\", token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"userId\":\"maxime\",\r\n  \"password\":\"pass1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAuth",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Songs",
			"item": [
				{
					"name": "GetAllSongs Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response sollte eine JSON sein\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response sollte ein array sein\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Jedes Objekt sollte die passenden Felder besitzen\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"title\");\r",
									"        pm.expect(item).to.have.property(\"artist\");\r",
									"        pm.expect(item).to.have.property(\"label\");\r",
									"        pm.expect(item).to.have.property(\"released\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllSongs No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSongById Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response sollte eine JSON sein\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Objekt sollte die passenden Felder besitzen\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"title\");\r",
									"    pm.expect(jsonData).to.have.property(\"artist\");\r",
									"    pm.expect(jsonData).to.have.property(\"label\");\r",
									"    pm.expect(jsonData).to.have.property(\"released\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songs/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs",
								"10"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSongById No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "dsfs",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songs?id=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs"
							],
							"query": [
								{
									"key": null,
									"value": null,
									"disabled": true
								},
								{
									"key": "id",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PostSong Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Chinese Food1\",\r\n  \"artist\": \"Alison Gold\",\r\n  \"label\": \"PMW Live\",\r\n  \"released\": 2013\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs"
							],
							"query": [
								{
									"key": "Song",
									"value": "song",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PostSong NotAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "qwert",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Chinese Food56\",\r\n  \"artist\": \"Alison Gold\",\r\n  \"label\": \"PMW Live\",\r\n  \"released\": 2013\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSong Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 10,\r\n        \"title\": \"Chinese Food Hier Neu 3\",\r\n        \"artist\": \"Alison Gold\",\r\n        \"label\": \"PMW Live\",\r\n        \"released\": 2013\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songs/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSong No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "xd1a245",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 11,\r\n        \"title\": \"Chinese FoodNewPutted\",\r\n        \"artist\": \"Alison Gold\",\r\n        \"label\": \"PMW Live\",\r\n        \"released\": 2013\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songs/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "zfvkasjvkolza",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:8080/songs/hello1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songs",
								"hello1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SongLists",
			"item": [
				{
					"name": "Get Songlists of Maxime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response sollte eine JSON sein\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response sollte ein array sein\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});",
									"",
									"pm.test(\"Jedes Objekt sollte die passenden Felder besitzen\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach((item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"ownerId\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"songList\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists?owner_id=maxime",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							],
							"query": [
								{
									"key": "owner_id",
									"value": "maxime"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get Songlists of Maxime",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "qwertyuiiooxd1a245",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/songLists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"songLists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "transfer-encoding",
									"value": "chunked"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Sat, 16 Sep 2023 11:03:22 GMT"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"ownerId\": \"maxime\",\n        \"name\": \"MaximesPrivate\",\n        \"songList\": [\n            {\n                \"id\": 2,\n                \"title\": \"Afternoon Delight\",\n                \"artist\": \"Starland Vocal Band\",\n                \"label\": \"Windsong\",\n                \"released\": 1976\n            },\n            {\n                \"id\": 1,\n                \"title\": \"MacArthur Park\",\n                \"artist\": \"Richard Harris\",\n                \"label\": \"Dunhill Records\",\n                \"released\": 1968\n            }\n        ],\n        \"isPrivate\": true\n    },\n    {\n        \"id\": 2,\n        \"ownerId\": \"maxime\",\n        \"name\": \"MaximesPublic\",\n        \"songList\": [\n            {\n                \"id\": 2,\n                \"title\": \"Afternoon Delight\",\n                \"artist\": \"Starland Vocal Band\",\n                \"label\": \"Windsong\",\n                \"released\": 1976\n            },\n            {\n                \"id\": 1,\n                \"title\": \"MacArthur Park\",\n                \"artist\": \"Richard Harris\",\n                \"label\": \"Dunhill Records\",\n                \"released\": 1968\n            }\n        ],\n        \"isPrivate\": false\n    },\n    {\n        \"id\": 4,\n        \"ownerId\": \"jane\",\n        \"name\": \"JanesPublic\",\n        \"songList\": [\n            {\n                \"id\": 2,\n                \"title\": \"Afternoon Delight\",\n                \"artist\": \"Starland Vocal Band\",\n                \"label\": \"Windsong\",\n                \"released\": 1976\n            },\n            {\n                \"id\": 1,\n                \"title\": \"MacArthur Park\",\n                \"artist\": \"Richard Harris\",\n                \"label\": \"Dunhill Records\",\n                \"released\": 1968\n            }\n        ],\n        \"isPrivate\": false\n    }\n]"
						}
					]
				},
				{
					"name": "Get Songlists of Jane",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response sollte eine JSON sein\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response sollte ein array sein\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});",
									"",
									"pm.test(\"Jedes Objekt sollte die passenden Felder besitzen\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach((item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"ownerId\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"songList\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists?owner_id=jane",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							],
							"query": [
								{
									"key": "owner_id",
									"value": "jane"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Songlists nicht existenter User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists?owner_id=someWrong",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							],
							"query": [
								{
									"key": "owner_id",
									"value": "someWrong"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SonglistByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Songlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response sollte eine JSON sein\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Objekt sollte die passenden Felder besitzen\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"ownerId\");",
									"    pm.expect(jsonData).to.have.property(\"name\");",
									"    pm.expect(jsonData).to.have.property(\"songList\");",
									"});",
									"",
									"pm.test(\"Location Header sollte die gleiche ID wie im Body enthalten\", function () {",
									"    // Überprüfen, ob der Location-Header vorhanden ist",
									"    pm.response.to.have.header(\"Location\");",
									"    ",
									"    // Den Wert des Location-Headers abrufen",
									"    const locationHeader = pm.response.headers.get(\"Location\");",
									"    ",
									"    // JSON-Antwortdaten abrufen",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // ID aus dem Antwort-Body abrufen",
									"    const idInBody = jsonData.id;",
									"    ",
									"    // Überprüfen, ob die ID im Location-Header enthalten ist",
									"    pm.expect(locationHeader).to.include(`/songlists/${idInBody}`);",
									"});",
									"",
									"pm.test(\"Speichert die ID als Environment-Variable\", function () {",
									"    // JSON-Antwortdaten abrufen",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // ID aus dem Antwort-Body abrufen",
									"    const idInBody = jsonData.id;",
									"",
									"    // Die ID als Environment-Variable setzen",
									"    pm.environment.set(\"current_songList_id\", idInBody);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"isPrivate\": true,\r\n\t\"name\": \"MaximesPrivate\",\r\n\t\"songList\": [\r\n\t\t{\r\n\t\t    \"id\": 10,\r\n\t\t\t\"title\": \"Chinese Food\",\r\n\t\t\t\"artist\": \"Alison Gold\",\r\n\t\t\t\"label\": \"PMW Live\",\r\n\t\t\t\"released\": 2013\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 9,\r\n\t\t\t\"title\": \"My Humps\",\r\n\t\t\t\"artist\": \"Black Eyed Peas\",\r\n\t\t\t\"label\": \"Universal Music\",\r\n\t\t\t\"released\": 2003\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songLists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Songlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": {{current_songList_id}},\r\n    \"isPrivate\": true,\r\n\t\"name\": \"MaximesNeuePrivate\",\r\n\t\"songList\": [\r\n\t\t{\r\n\t\t    \"id\": 10,\r\n\t\t\t\"title\": \"Chinese Food\",\r\n\t\t\t\"artist\": \"Alison Gold\",\r\n\t\t\t\"label\": \"PMW Live\",\r\n\t\t\t\"released\": 2013\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 9,\r\n\t\t\t\"title\": \"My Humps\",\r\n\t\t\t\"artist\": \"Black Eyed Peas\",\r\n\t\t\t\"label\": \"Universal Music\",\r\n\t\t\t\"released\": 2003\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/songLists/{{current_songList_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists",
								"{{current_songList_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Songlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists/{{current_songList_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists",
								"{{current_songList_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "integrationTestSuitePresentation",
			"item": [
				{
					"name": "nichtExistierenden_UserEinloggen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 401, da nicht existender User loggt sich ein\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"userId\":\"SpiderMan\",\r\n  \"password\":\"peterParker\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "existierenden_UserEinloggen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, da existenter User loggt sich ein\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const token = pm.response.text();",
									"",
									"console.log(\"Received token:\", token);",
									"",
									"// Token direkt aus der Antwort als Text speichern",
									"pm.environment.set(\"fritzToken\", token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"userId\":\"fritz\",\r\n  \"password\":\"pass1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserHoltSichEigeneSongListen",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{fritzToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/songLists?owner_id=fritz",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							],
							"query": [
								{
									"key": "owner_id",
									"value": "fritz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UserHoltSichSongListenVonEinerAnderenNutzer_in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response sollte eine JSON sein\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response sollte ein array sein\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});",
									"",
									"pm.test(\"Jedes Objekt sollte die passenden Felder besitzen\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach((item) => {",
									"        pm.expect(item).to.have.property(\"id\");",
									"        pm.expect(item).to.have.property(\"ownerId\");",
									"        pm.expect(item).to.have.property(\"name\");",
									"        pm.expect(item).to.have.property(\"songList\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{fritzToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/songLists?owner_id=jane",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists"
							],
							"query": [
								{
									"key": "owner_id",
									"value": "jane"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "eigeneAktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{fritzToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": 28,\r\n    \"isPrivate\": true,\r\n\t\"name\": \"FritzsNeuePrivate\",\r\n\t\"songList\": [\r\n\t\t{\r\n\t\t    \"id\": 10,\r\n\t\t\t\"title\": \"Chinese Food\",\r\n\t\t\t\"artist\": \"Alison Gold\",\r\n\t\t\t\"label\": \"PMW Live\",\r\n\t\t\t\"released\": 2013\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 9,\r\n\t\t\t\"title\": \"My Humps\",\r\n\t\t\t\"artist\": \"Black Eyed Peas\",\r\n\t\t\t\"label\": \"Universal Music\",\r\n\t\t\t\"released\": 2003\r\n\t\t}\r\n\t]\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/songLists/28",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists",
								"28"
							]
						}
					},
					"response": []
				},
				{
					"name": "fremdeAktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code ist 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{fritzToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"id\": 1,\r\n    \"isPrivate\": true,\r\n\t\"name\": \"MaximesNeuePrivate\",\r\n\t\"songList\": [\r\n\t\t{\r\n\t\t    \"id\": 10,\r\n\t\t\t\"title\": \"Chinese Food\",\r\n\t\t\t\"artist\": \"Alison Gold\",\r\n\t\t\t\"label\": \"PMW Live\",\r\n\t\t\t\"released\": 2013\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 9,\r\n\t\t\t\"title\": \"My Humps\",\r\n\t\t\t\"artist\": \"Black Eyed Peas\",\r\n\t\t\t\"label\": \"Universal Music\",\r\n\t\t\t\"released\": 2003\r\n\t\t}\r\n\t]\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/songLists/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"songLists",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "zelkulonmicroservice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/songelastic/_search",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"songelastic",
								"_search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "zelkulonMitElastic",
			"item": [
				{
					"name": "sample",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bohemian Rhapsody\",\n    \"artist\": \"Queen\",\n    \"releaseYear\": \"1975\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9020/songElastic",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9020",
							"path": [
								"songElastic"
							]
						}
					},
					"response": []
				},
				{
					"name": "ElasticSearch",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/songelastic/_search",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"songelastic",
								"_search"
							]
						}
					},
					"response": []
				},
				{
					"name": "MyCurrentGETSET",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/esong",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"esong"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCountArtistName",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/esong/count/ski",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"esong",
								"count",
								"ski"
							]
						}
					},
					"response": []
				},
				{
					"name": "currentlyPlayingLogging",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://accounts.spotify.com/authorize?client_id=3373434b15ef4563bef4c04432187fd3&response_type=code&redirect_uri=http://127.0.0.1:8080/api&scope=user-read-playback-state",
							"protocol": "https",
							"host": [
								"accounts",
								"spotify",
								"com"
							],
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "3373434b15ef4563bef4c04432187fd3"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "redirect_uri",
									"value": "http://127.0.0.1:8080/api"
								},
								{
									"key": "scope",
									"value": "user-read-playback-state"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "derReqVonCodeZuAuthToken",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "e118ac56b73a43acac19a6fce5336da2",
									"type": "string"
								},
								{
									"key": "username",
									"value": "3373434b15ef4563bef4c04432187fd3",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "AQCnLC9IxbcEQDlTdxm1kUEv7c1rRCJJPCnuBF4n3ngrPA52tWhbDGwagIpbyBUgTKaGN4C8y_i9DaN_wpEqZHxNik_95Kn_-jiarQVK_BDXZJz0NNlK89BwK4cbyqsj7778VeMH6xynEGdLBDPKR2XcP4fgkBZdTQw96F_OcmnZrWTjiVFcRa7slLTMnSuk8SBoErJYSg",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "http://127.0.0.1:8080/api",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://accounts.spotify.com/api/token",
							"protocol": "https",
							"host": [
								"accounts",
								"spotify",
								"com"
							],
							"path": [
								"api",
								"token"
							]
						}
					},
					"response": [
						{
							"name": "derReqVonCodeZuAuthToken",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "AQB812_ETVcZSZzHw46WWwY7mO4sf9WvOCV7XZgAC6QYs43BJOknxcGrIARAXDKGz0LsTIgyZAvLe9RVETt4_tGmZpJedCP9xeJxHywyyD8hrLVk9KPSM1Sp72DaE1i1aGPAdIV2HN-1NMFBg2DogoncRQJhpM6nzOgnCvOTi5US7B2Mhq1sj9pd12miSO_gSNZaH1pXgg",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "http://127.0.0.1:8080/api",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://accounts.spotify.com/api/token",
									"protocol": "https",
									"host": [
										"accounts",
										"spotify",
										"com"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Wed, 20 Sep 2023 09:55:02 GMT"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "sp-trace-id",
									"value": "dc03966f30ed3a4c"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "31"
								},
								{
									"key": "server",
									"value": "envoy"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "Via",
									"value": "HTTP/2 edgeproxy, 1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"BQAsTobwmOrR0ZPeQDgutY7Ys9BivyTkvzKsa_tvGcPtDJWNNQrGtCq_ttZnnlSHCMFdxBsGmC-hS8pZcUbOlQMDH44Jj2qrC77-VwMzo7DZ8aaD4ZT3pJx0-dCwdHCA12nR9sX-7F-Uqhrd9w_NlCtb7rFHNefVK-RQkwZgKm7SZWc6PC3eYZGSonYu23xLWAeOOArxXMRovQ\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"AQDPUcqr7OyqMYJjqE3SgITHMFzBExLpQY6BexFFVaTKPRmxO3eJN27XHqfQ-0lXRbqRlH-4yYvpW2VDLKFPpcycrW6NJGKMPwxRwbYn-8QirMkWh9JOgWBQprbW8n4Dfis\",\n    \"scope\": \"user-read-playback-state\"\n}"
						}
					]
				},
				{
					"name": "jetztvonatuZuToken",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer BQD80ChpetphHaKx5J6c-swiMiOK4gfPeniNA-_n8EH1l7_EjRC-zi59oVU6osNDXWnigSciKGweqZmZlOg5kPFECfsFAZZ7tlvPlDCr2Jtvgp9hNpSLTjfee-J4EvZAMKZxNUyE20_PaMdmoXT5DZLcpjSbI-UMRJj-8WaQgRzBI1NM65SLBz1AAO_TOxsGG5FwS64RIsMbww",
								"type": "text"
							},
							{
								"key": "Value",
								"value": "Bearer BQAsTobwmOrR0ZPeQDgutY7Ys9BivyTkvzKsa_tvGcPtDJWNNQrGtCq_ttZnnlSHCMFdxBsGmC-hS8pZcUbOlQMDH44Jj2qrC77-VwMzo7DZ8aaD4ZT3pJx0-dCwdHCA12nR9sX-7F-Uqhrd9w_NlCtb7rFHNefVK-RQkwZgKm7SZWc6PC3eYZGSonYu23xLWAeOOArxXMRovQ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/player/currently-playing",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"player",
								"currently-playing"
							]
						}
					},
					"response": [
						{
							"name": "jetztvonatuZuToken",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer BQAsTobwmOrR0ZPeQDgutY7Ys9BivyTkvzKsa_tvGcPtDJWNNQrGtCq_ttZnnlSHCMFdxBsGmC-hS8pZcUbOlQMDH44Jj2qrC77-VwMzo7DZ8aaD4ZT3pJx0-dCwdHCA12nR9sX-7F-Uqhrd9w_NlCtb7rFHNefVK-RQkwZgKm7SZWc6PC3eYZGSonYu23xLWAeOOArxXMRovQ",
										"type": "text"
									},
									{
										"key": "Value",
										"value": "Bearer BQAsTobwmOrR0ZPeQDgutY7Ys9BivyTkvzKsa_tvGcPtDJWNNQrGtCq_ttZnnlSHCMFdxBsGmC-hS8pZcUbOlQMDH44Jj2qrC77-VwMzo7DZ8aaD4ZT3pJx0-dCwdHCA12nR9sX-7F-Uqhrd9w_NlCtb7rFHNefVK-RQkwZgKm7SZWc6PC3eYZGSonYu23xLWAeOOArxXMRovQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "https://api.spotify.com/v1/me/player/currently-playing",
									"protocol": "https",
									"host": [
										"api",
										"spotify",
										"com"
									],
									"path": [
										"v1",
										"me",
										"player",
										"currently-playing"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "cache-control",
									"value": "private, max-age=0"
								},
								{
									"key": "x-robots-tag",
									"value": "noindex, nofollow"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-allow-headers",
									"value": "Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, POST, OPTIONS, PUT, DELETE, PATCH"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "access-control-max-age",
									"value": "604800"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "date",
									"value": "Wed, 20 Sep 2023 09:59:20 GMT"
								},
								{
									"key": "server",
									"value": "envoy"
								},
								{
									"key": "Via",
									"value": "HTTP/2 edgeproxy, 1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": 1695203855889,\n    \"context\": {\n        \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/collection/tracks\"\n        },\n        \"href\": \"https://api.spotify.com/v1/me/tracks\",\n        \"type\": \"collection\",\n        \"uri\": \"spotify:user:20116xrfhhguokphxbdzefpoo:collection\"\n    },\n    \"progress_ms\": 105137,\n    \"item\": {\n        \"album\": {\n            \"album_type\": \"single\",\n            \"artists\": [\n                {\n                    \"external_urls\": {\n                        \"spotify\": \"https://open.spotify.com/artist/2Lg7y5DHmBMrxRI6Y4ThfU\"\n                    },\n                    \"href\": \"https://api.spotify.com/v1/artists/2Lg7y5DHmBMrxRI6Y4ThfU\",\n                    \"id\": \"2Lg7y5DHmBMrxRI6Y4ThfU\",\n                    \"name\": \"Romero\",\n                    \"type\": \"artist\",\n                    \"uri\": \"spotify:artist:2Lg7y5DHmBMrxRI6Y4ThfU\"\n                }\n            ],\n            \"available_markets\": [\n                \"AR\",\n                \"AU\",\n                \"AT\",\n                \"BE\",\n                \"BO\",\n                \"BR\",\n                \"BG\",\n                \"CA\",\n                \"CL\",\n                \"CO\",\n                \"CR\",\n                \"CY\",\n                \"CZ\",\n                \"DK\",\n                \"DO\",\n                \"DE\",\n                \"EC\",\n                \"EE\",\n                \"SV\",\n                \"FI\",\n                \"FR\",\n                \"GR\",\n                \"GT\",\n                \"HN\",\n                \"HK\",\n                \"HU\",\n                \"IS\",\n                \"IE\",\n                \"IT\",\n                \"LV\",\n                \"LT\",\n                \"LU\",\n                \"MY\",\n                \"MT\",\n                \"MX\",\n                \"NL\",\n                \"NZ\",\n                \"NI\",\n                \"NO\",\n                \"PA\",\n                \"PY\",\n                \"PE\",\n                \"PH\",\n                \"PL\",\n                \"PT\",\n                \"SG\",\n                \"SK\",\n                \"ES\",\n                \"SE\",\n                \"CH\",\n                \"TW\",\n                \"TR\",\n                \"UY\",\n                \"US\",\n                \"GB\",\n                \"AD\",\n                \"LI\",\n                \"MC\",\n                \"ID\",\n                \"JP\",\n                \"TH\",\n                \"VN\",\n                \"RO\",\n                \"IL\",\n                \"ZA\",\n                \"SA\",\n                \"AE\",\n                \"BH\",\n                \"QA\",\n                \"OM\",\n                \"KW\",\n                \"EG\",\n                \"MA\",\n                \"DZ\",\n                \"TN\",\n                \"LB\",\n                \"JO\",\n                \"PS\",\n                \"IN\",\n                \"BY\",\n                \"KZ\",\n                \"MD\",\n                \"UA\",\n                \"AL\",\n                \"BA\",\n                \"HR\",\n                \"ME\",\n                \"MK\",\n                \"RS\",\n                \"SI\",\n                \"KR\",\n                \"BD\",\n                \"PK\",\n                \"LK\",\n                \"GH\",\n                \"KE\",\n                \"NG\",\n                \"TZ\",\n                \"UG\",\n                \"AG\",\n                \"AM\",\n                \"BS\",\n                \"BB\",\n                \"BZ\",\n                \"BT\",\n                \"BW\",\n                \"BF\",\n                \"CV\",\n                \"CW\",\n                \"DM\",\n                \"FJ\",\n                \"GM\",\n                \"GE\",\n                \"GD\",\n                \"GW\",\n                \"GY\",\n                \"HT\",\n                \"JM\",\n                \"KI\",\n                \"LS\",\n                \"LR\",\n                \"MW\",\n                \"MV\",\n                \"ML\",\n                \"MH\",\n                \"FM\",\n                \"NA\",\n                \"NR\",\n                \"NE\",\n                \"PW\",\n                \"PG\",\n                \"WS\",\n                \"SM\",\n                \"ST\",\n                \"SN\",\n                \"SC\",\n                \"SL\",\n                \"SB\",\n                \"KN\",\n                \"LC\",\n                \"VC\",\n                \"SR\",\n                \"TL\",\n                \"TO\",\n                \"TT\",\n                \"TV\",\n                \"VU\",\n                \"AZ\",\n                \"BN\",\n                \"BI\",\n                \"KH\",\n                \"CM\",\n                \"TD\",\n                \"KM\",\n                \"GQ\",\n                \"SZ\",\n                \"GA\",\n                \"GN\",\n                \"KG\",\n                \"LA\",\n                \"MO\",\n                \"MR\",\n                \"MN\",\n                \"NP\",\n                \"RW\",\n                \"TG\",\n                \"UZ\",\n                \"ZW\",\n                \"BJ\",\n                \"MG\",\n                \"MU\",\n                \"MZ\",\n                \"AO\",\n                \"CI\",\n                \"DJ\",\n                \"ZM\",\n                \"CD\",\n                \"CG\",\n                \"IQ\",\n                \"LY\",\n                \"TJ\",\n                \"VE\",\n                \"ET\",\n                \"XK\"\n            ],\n            \"external_urls\": {\n                \"spotify\": \"https://open.spotify.com/album/7BUBA636QQxzHhSxTcC2ft\"\n            },\n            \"href\": \"https://api.spotify.com/v1/albums/7BUBA636QQxzHhSxTcC2ft\",\n            \"id\": \"7BUBA636QQxzHhSxTcC2ft\",\n            \"images\": [\n                {\n                    \"height\": 640,\n                    \"url\": \"https://i.scdn.co/image/ab67616d0000b2737aa2c6ebb49a25703d12b11e\",\n                    \"width\": 640\n                },\n                {\n                    \"height\": 300,\n                    \"url\": \"https://i.scdn.co/image/ab67616d00001e027aa2c6ebb49a25703d12b11e\",\n                    \"width\": 300\n                },\n                {\n                    \"height\": 64,\n                    \"url\": \"https://i.scdn.co/image/ab67616d000048517aa2c6ebb49a25703d12b11e\",\n                    \"width\": 64\n                }\n            ],\n            \"name\": \"Nie Mein Shawty\",\n            \"release_date\": \"2022-10-07\",\n            \"release_date_precision\": \"day\",\n            \"total_tracks\": 1,\n            \"type\": \"album\",\n            \"uri\": \"spotify:album:7BUBA636QQxzHhSxTcC2ft\"\n        },\n        \"artists\": [\n            {\n                \"external_urls\": {\n                    \"spotify\": \"https://open.spotify.com/artist/2Lg7y5DHmBMrxRI6Y4ThfU\"\n                },\n                \"href\": \"https://api.spotify.com/v1/artists/2Lg7y5DHmBMrxRI6Y4ThfU\",\n                \"id\": \"2Lg7y5DHmBMrxRI6Y4ThfU\",\n                \"name\": \"Romero\",\n                \"type\": \"artist\",\n                \"uri\": \"spotify:artist:2Lg7y5DHmBMrxRI6Y4ThfU\"\n            }\n        ],\n        \"available_markets\": [\n            \"AR\",\n            \"AU\",\n            \"AT\",\n            \"BE\",\n            \"BO\",\n            \"BR\",\n            \"BG\",\n            \"CA\",\n            \"CL\",\n            \"CO\",\n            \"CR\",\n            \"CY\",\n            \"CZ\",\n            \"DK\",\n            \"DO\",\n            \"DE\",\n            \"EC\",\n            \"EE\",\n            \"SV\",\n            \"FI\",\n            \"FR\",\n            \"GR\",\n            \"GT\",\n            \"HN\",\n            \"HK\",\n            \"HU\",\n            \"IS\",\n            \"IE\",\n            \"IT\",\n            \"LV\",\n            \"LT\",\n            \"LU\",\n            \"MY\",\n            \"MT\",\n            \"MX\",\n            \"NL\",\n            \"NZ\",\n            \"NI\",\n            \"NO\",\n            \"PA\",\n            \"PY\",\n            \"PE\",\n            \"PH\",\n            \"PL\",\n            \"PT\",\n            \"SG\",\n            \"SK\",\n            \"ES\",\n            \"SE\",\n            \"CH\",\n            \"TW\",\n            \"TR\",\n            \"UY\",\n            \"US\",\n            \"GB\",\n            \"AD\",\n            \"LI\",\n            \"MC\",\n            \"ID\",\n            \"JP\",\n            \"TH\",\n            \"VN\",\n            \"RO\",\n            \"IL\",\n            \"ZA\",\n            \"SA\",\n            \"AE\",\n            \"BH\",\n            \"QA\",\n            \"OM\",\n            \"KW\",\n            \"EG\",\n            \"MA\",\n            \"DZ\",\n            \"TN\",\n            \"LB\",\n            \"JO\",\n            \"PS\",\n            \"IN\",\n            \"BY\",\n            \"KZ\",\n            \"MD\",\n            \"UA\",\n            \"AL\",\n            \"BA\",\n            \"HR\",\n            \"ME\",\n            \"MK\",\n            \"RS\",\n            \"SI\",\n            \"KR\",\n            \"BD\",\n            \"PK\",\n            \"LK\",\n            \"GH\",\n            \"KE\",\n            \"NG\",\n            \"TZ\",\n            \"UG\",\n            \"AG\",\n            \"AM\",\n            \"BS\",\n            \"BB\",\n            \"BZ\",\n            \"BT\",\n            \"BW\",\n            \"BF\",\n            \"CV\",\n            \"CW\",\n            \"DM\",\n            \"FJ\",\n            \"GM\",\n            \"GE\",\n            \"GD\",\n            \"GW\",\n            \"GY\",\n            \"HT\",\n            \"JM\",\n            \"KI\",\n            \"LS\",\n            \"LR\",\n            \"MW\",\n            \"MV\",\n            \"ML\",\n            \"MH\",\n            \"FM\",\n            \"NA\",\n            \"NR\",\n            \"NE\",\n            \"PW\",\n            \"PG\",\n            \"WS\",\n            \"SM\",\n            \"ST\",\n            \"SN\",\n            \"SC\",\n            \"SL\",\n            \"SB\",\n            \"KN\",\n            \"LC\",\n            \"VC\",\n            \"SR\",\n            \"TL\",\n            \"TO\",\n            \"TT\",\n            \"TV\",\n            \"VU\",\n            \"AZ\",\n            \"BN\",\n            \"BI\",\n            \"KH\",\n            \"CM\",\n            \"TD\",\n            \"KM\",\n            \"GQ\",\n            \"SZ\",\n            \"GA\",\n            \"GN\",\n            \"KG\",\n            \"LA\",\n            \"MO\",\n            \"MR\",\n            \"MN\",\n            \"NP\",\n            \"RW\",\n            \"TG\",\n            \"UZ\",\n            \"ZW\",\n            \"BJ\",\n            \"MG\",\n            \"MU\",\n            \"MZ\",\n            \"AO\",\n            \"CI\",\n            \"DJ\",\n            \"ZM\",\n            \"CD\",\n            \"CG\",\n            \"IQ\",\n            \"LY\",\n            \"TJ\",\n            \"VE\",\n            \"ET\",\n            \"XK\"\n        ],\n        \"disc_number\": 1,\n        \"duration_ms\": 162000,\n        \"explicit\": false,\n        \"external_ids\": {\n            \"isrc\": \"DEE862201832\"\n        },\n        \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/track/0rCl2Tq2rctLJaqcv4nzV1\"\n        },\n        \"href\": \"https://api.spotify.com/v1/tracks/0rCl2Tq2rctLJaqcv4nzV1\",\n        \"id\": \"0rCl2Tq2rctLJaqcv4nzV1\",\n        \"is_local\": false,\n        \"name\": \"Nie Mein Shawty\",\n        \"popularity\": 62,\n        \"preview_url\": \"https://p.scdn.co/mp3-preview/a1e31d52efc892d8cbb462cfcb24e8ddae030c3e?cid=3373434b15ef4563bef4c04432187fd3\",\n        \"track_number\": 1,\n        \"type\": \"track\",\n        \"uri\": \"spotify:track:0rCl2Tq2rctLJaqcv4nzV1\"\n    },\n    \"currently_playing_type\": \"track\",\n    \"actions\": {\n        \"disallows\": {\n            \"resuming\": true\n        }\n    },\n    \"is_playing\": true\n}"
						}
					]
				}
			]
		},
		{
			"name": "TestFürAuthInOtherApp",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9998/api/get-user-code",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9998",
							"path": [
								"api",
								"get-user-code"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}